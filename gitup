subadd() {
	git submodule add $1
	git submodule update --init --recursive
	SUBMODULE_ARRAY=($(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/'))
	for i in "${SUBMODULE_ARRAY[@]}"; do
		COMMIT=$(git -C $i rev-parse HEAD)
		BRANCH=$(git -C $i branch --no-color --no-column --format "%(refname:lstrip=2)" --contains $COMMIT | tail -n1)
		echo "checking out $BRANCH branch for $i submodule"
		git -C $i checkout $BRANCH
	done
}

subcheckout() {
	if [ "$1" = "-b" ]; then
		git checkout -b $2
		git submodule foreach --recursive git checkout -b $2
	elif [ "$1" != "" ]; then
		if git rev-parse --quiet --verify $1 > /dev/null; then
			echo "$1 branche exists on main repo"
			if git submodule foreach --recursive git rev-parse --quiet --verify $1 > /dev/null; then
				echo "$1 branche exists on all subrepos"
				git checkout $1
				git submodule foreach --recursive git checkout $1
			else
				echo "$1 branch does not exist in subrepos"
			fi
		else
			echo "$1 branch does not exist in main repo"
		fi
	else
		git checkout
		SUBMODULE_ARRAY=($(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/'))
		for i in "${SUBMODULE_ARRAY[@]}"; do
			COMMIT=$(git -C $i rev-parse HEAD)
			BRANCH=$(git -C $i branch --no-color --no-column --format "%(refname:lstrip=2)" --contains $COMMIT | tail -n1)
			echo "checking out $BRANCH branch for $i submodule"
			git -C $i checkout $BRANCH
		done
	fi
}

subcommit() {
	if [ "$1" = "-m" ]; then
		git commit -m "$2"
		git submodule foreach --recursive git commit -m "$2"
	else
		git commit -m "$1"
		git submodule foreach --recursive git commit -m "$1"
	fi
}

subrm() {
	TRIMMED=$(echo "$1" | sed 's:/*$::')
	rm -irf $TRIMMED
	git rm $TRIMMED
	rm -irf .git/modules/$TRIMMED
	git config --remove-section submodule.$TRIMMED
	if [ -f .gitmodules ]; then
		if ! [ -s .gitmodules ]; then
			git restore --staged .gitmodules
			rm .gitmodules
		fi
	fi
}

substatus() {
	git status
	git submodule foreach --recursive git status
}

subtag() {
	REMOTE_ARRAY=($(git remote))
	if [ "$1" = "-d" ]; then
		git tag -d $2
		git submodule foreach --recursive git tag -d $2
		for i in "${REMOTE_ARRAY[@]}"; do
			echo "removing tag $2 from remote $i in main repo"
			git push $i :refs/tags/$2
			echo "removing tag $2 from remote $i in all sub-repos"
			git submodule foreach --recursive git push $i :refs/tags/$2
		done
	elif [ "$1" = "-l" ] || [ "$1" = "" ]; then
		echo "local git tags in main repo:"
		git tag -l
		echo "local git tags in submodules:"
		git submodule foreach --recursive git tag -l
		for i in "${REMOTE_ARRAY[@]}"; do
			echo "git tags in main repo from $i remote"
			git ls-remote --tags $i
		done
	else
		echo "git tag"
		git tag $1
		echo "git submodule foreach"
		git submodule foreach --recursive git tag $1
		for i in "${REMOTE_ARRAY[@]}"; do
			echo "ENTERING REMOTE $i"
			echo "git push $i $1"
			git push $i $1
			echo "remote submodule foreach"
			#git submodule foreach --recursive git push $i $1
		done
	fi
}

subdiff() {
	REMOTE_ARRAY=($(git remote))
	SUBMODULE_ARRAY=($(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/'))
	# LOCALCOMMIT=$(git rev-parse HEAD)
	# CURRENTBRANCH=$(git branch --show-current)
	for i in "${REMOTE_ARRAY[@]}"; do
		HEADBRANCH=$(git remote show $i | grep "HEAD branch" | sed -e 's/  HEAD branch: //')
		git fetch -q $i $HEADBRANCH
		PUSHLOG=$(git log $i/$HEADBRANCH..HEAD)
		PULLLOG=$(git log HEAD..$i/$HEADBRANCH)
		if [ "$PUSHLOG" != "" ]; then
			echo "unpushed changes to $i/$HEADBRANCH in main repo:"
			git log $i/$HEADBRANCH..HEAD
		fi
		if [ "$PULLLOG" != "" ]; then
			echo "unpulled changes from $i/$HEADBRANCH in main repo"
			git log HEAD..$i/$HEADBRANCH
		fi
	done
	for i in "${SUBMODULE_ARRAY[@]}"; do
		SUBREMOTE_ARRAY=($(git -C $i remote))
		for j in "${SUBREMOTE_ARRAY[@]}"; do
			SUBHEADBRANCH=$(git -C $i remote show $j | grep "HEAD branch" | sed -e 's/  HEAD branch: //')
			git -C $i fetch -q $j $SUBHEADBRANCH
			SUBPUSHLOG=$(git -C $i log $j/$SUBHEADBRANCH..HEAD)
			SUBPULLLOG=$(git -C $i log HEAD..$j/$SUBHEADBRANCH)
			if [ "$SUBPUSHLOG" != "" ]; then
				echo "unpushed changes to $j/$SUBHEADBRANCH in submodule $i:"
				git -C $i log $j/$SUBHEADBRANCH..HEAD
			fi
			if [ "$SUBPULLLOG" != "" ]; then
				echo "unpulled changes from $j/$SUBHEADBRANCH in submodule $i:"
				git -C $i log HEAD..$j/$SUBHEADBRANCH
			fi
		done
	done
}

help() {
	cat << EOF
usage: gitup <command>

These are the current available commands:
checkout [-b] [--recursive|--recurse-submodules] <branch>
status
EOF
}

menu() {
	if [ "$1" = "subadd" ] || [ "$1" = "subcheckout" ] || [ "$1" = "subcommit" ] || [ "$1" = "subdiff" ] || [ "$1" = "subrm" ] || [ "$1" = "substatus" ] || [ "$1" = "subtag" ]; then
		$@
	elif [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		help
	else
		git $@
	fi
}

menu $@
# git submodule--helper list | sed -e 's/^.* 0\t//'
