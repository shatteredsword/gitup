#!/usr/bin/env bash
VERSION="gitup version 0.1.0"
SCRIPT_NAME=$(basename "$0")

#add any top level functions that you want to be accessible to this list 
#with the corresponding maximum number of arguments of that function
#(not including the --help argument)
declare -A ARGUMENTS=(
	[config]=0
	[pending]=0
	[subadd]=1
	[subcheckout]=2
	[subcommit]=-1
	[subrm]=1
	[substatus]=-1
	[subtag]=2
	[help]=1
	[mangen]=0
)

config() {
	echo "this is a thing"
	read -rp "do you want to continue? y/n " RESPONSE
	echo "$RESPONSE"
}

pending() {
	local remote_array
	mapfile -t remote_array <<< "$(git remote)"
	local submodule_array
	mapfile -t submodule_array <<< "$(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/')"
	for i in "${remote_array[@]}"; do
		local headbranch
		headbranch=$(git remote show "$i" | grep "HEAD branch" | sed -e 's/  HEAD branch: //')
		git fetch -q "$i" "$headbranch"
		local pushlog
		pushlog=$(git log "$i"/"$headbranch"..HEAD)
		local pulllog
		pulllog=$(git log HEAD.."$i"/"$headbranch")
		if [ "$pushlog" != "" ]; then
			echo "unpushed changes to $i/$headbranch in main repo:"
			git log "$i"/"$headbranch"..HEAD
		fi
		if [ "$pulllog" != "" ]; then
			echo "unpulled changes from $i/$headbranch in main repo"
			git log HEAD.."$i"/"$headbranch"
		fi
		if [ "$pushlog" = "" ] && [ "$pulllog" = "" ]; then
			echo "main repo is up-to-date"
		fi
	done
	for i in "${submodule_array[@]}"; do
		local subremote_array
		mapfile -t subremote_array <<< "$(git -C "$i" remote)"
		for j in "${subremote_array[@]}"; do
			local subheadbranch
			subheadbranch=$(git -C "$i" remote show "$j" | grep "HEAD branch" | sed -e 's/  HEAD branch: //')
			git -C "$i" fetch -q "$j" "$subheadbranch"
			local subpushlog
			subpushlog=$(git -C "$i" log "$j"/"$subheadbranch"..HEAD)
			local subpulllog
			subpulllog=$(git -C "$i" log HEAD.."$j"/"$subheadbranch")
			if [ "$subpushlog" != "" ]; then
				echo "unpushed changes to $j/$subheadbranch in submodule $i:"
				git -C "$i" log "$j"/"$subheadbranch"..HEAD
			fi
			if [ "$subpulllog" != "" ]; then
				echo "unpulled changes from $j/$subheadbranch in submodule $i:"
				git -C "$i" log HEAD.."$j"/"$subheadbranch"
			fi
			if [ "$subpushlog" = "" ] && [ "$subpulllog" = "" ]; then
				echo "submodule $i is up-to-date"
			fi
		done
	done
}

subadd() {
	if [ "$1" = "" ]; then
		echo "$SCRIPT_NAME subadd requires a repo URL as an argument"
	elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	else
		if git submodule add "$1"; then
			git submodule update --init --recursive
			local submodule_array
			mapfile -t submodule_array <<< "$(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/')"
			for i in "${submodule_array[@]}"; do
				local commit
				commit=$(git -C "$i" rev-parse HEAD)
				local branch
				branch=$(git -C "$i" branch --no-color --no-column --format "%(refname:lstrip=2)" --contains "$commit" | tail -n1)
				echo "checking out $branch branch for $i submodule"
				git -C "$i" checkout "$branch"
			done
		fi
	fi
}

subcheckout() {
	if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$2" = "--help" ] || [ "$2" = "-h" ] || [ "$1" = "-bh" ] || [ "$1" = "-hb" ] || [ "$2" = "-bh" ] || [ "$2" = "-hb" ]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	elif [ "$1" = "-b" ]; then
		git checkout -b "$2"
		git submodule foreach --recursive git checkout -b "$2"
	elif [ "$1" != "" ]; then
		if git rev-parse --quiet --verify "$1" > /dev/null; then
			echo "$1 branch exists on main repo"
			if git submodule foreach --recursive git rev-parse --quiet --verify "$1" > /dev/null; then
				echo "$1 branch exists on all subrepos"
				git checkout "$1"
				git submodule foreach --recursive git checkout "$1"
			else
				echo "$1 branch does not exist in subrepos"
			fi
		else
			echo "$1 branch does not exist in main repo"
		fi
	else
		git checkout
		local submodule_array
		mapfile -t submodule_array <<< "$(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/')"
		for i in "${submodule_array[@]}"; do
			local commit
			commit=$(git -C "$i" rev-parse HEAD)
			local branch
			branch=$(git -C "$i" branch --no-color --no-column --format "%(refname:lstrip=2)" --contains "$commit" | tail -n1)
			echo "checking out $branch branch for $i submodule"
			git -C "$i" checkout "$branch"
		done
	fi
}

subcommit() {
	if [[ "$*" == *"--help"* ]] || [[ "$*" == *"-h"* ]]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	else
		git commit "$@"
		git submodule foreach --recursive git commit "$@"
	fi
}

subrm() {
	if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	else
		local trimmed
		trimmed=${1%/*}
		rm -irf "$trimmed"
		git rm "$trimmed"
		rm -irf .git/modules/"$trimmed"
		git config --remove-section submodule."$trimmed"
		if [ -f .gitmodules ]; then
			if ! [ -s .gitmodules ]; then
				git restore --staged .gitmodules
				rm .gitmodules
			fi
		fi
	fi
}

substatus() {
	local submodule_array
	mapfile -t submodule_array <<< "$(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/')"
	if [[ "$*" == *"--help"* ]] || [[ "$*" == *"-h"* ]]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	elif [ "$1" = "" ]; then
		echo "status for main repo:"
		git status
		for i in "${submodule_array[@]}"; do
			echo "status for $i submodule:"
			git -C "$i" status
		done
	else
		echo "status for main repo:"
		git status "$@"
		for i in "${submodule_array[@]}"; do
			echo "status for $i submodule:"
			git -C "$i" status "$@"
		done
	fi
}

subtag() {
	local remote_array
	mapfile -t remote_array <<< "$(git remote)"
	local submodule_array
	mapfile -t submodule_array <<< "$(git submodule status --recursive | sed -e 's/^.* \(.*\) .*/\1/')"
	if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$2" = "--help" ] || [ "$2" = "-h" ]; then
		man "$SCRIPT_NAME-${FUNCNAME[0]}"
	elif [ "$1" = "-d" ] || [ "$1" = "--delete" ]; then
		echo "removing tag $2 from main repo"
		git tag -d "$2"
		for i in "${submodule_array[@]}"; do
			echo "removing tag $2 from submodule $i"
			git -C tag -d "$2"
		done
		for i in "${remote_array[@]}"; do
			echo "removing tag $2 from remote $i in main repo"
			git push "$i" :refs/tags/"$2"
		done
		for i in "${submodule_array[@]}"; do
			local subremote_array
			mapfile -t subremote_array <<< "$(git -C "$i" remote)"
			for j in "${subremote_array[@]}"; do
				echo "removing tag $2 from remote $j in submodule $i"
				git -C "$i" push "$j" :refs/tags/"$2"
			done
		done
	elif [ "$1" = "-l" ] || [ "$1" = "--list" ] || [ "$1" = "" ]; then
		echo "fetching local tags..."
		echo "local git tags in main repo:"
		git tag -l
		for i in "${submodule_array[@]}"; do
			echo "local git tags in submodule $i:"
			git -C "$i" tag -l
		done
		echo "fetching remote tags..."
		for i in "${remote_array[@]}"; do
			echo "git tags from $i remote in main repo:"
			git ls-remote --tags "$i"
		done
		for i in "${submodule_array[@]}"; do
			local subremote_array
			mapfile -t subremote_array <<< "$(git -C "$i" remote)"
			for j in "${subremote_array[@]}"; do
				echo "git tags from $j remote in submodule $i:"
				git -C "$i" ls-remote --tags "$j"
			done
		done
	else
		echo "adding tag $1 to main repo"
		git tag "$1"
		for i in "${remote_array[@]}"; do
			echo "pushing tag $1 to remote $i"
			git push "$i" "$1"
		done
		for i in "${submodule_array[@]}"; do
			echo "adding tag $1 to submodule $i"
			git -C "$i" tag "$1"
			local subremote_array
			mapfile -t subremote_array <<< "$(git -C "$i" remote)"
			for j in "${subremote_array[@]}"; do
				echo "pushing tag $1 to remote $j in submodule $i"
				git -C "$i" push "$j" "$1"
			done
		done
	fi
}

help() {
	if [ "$1" != "" ]; then
		if [ "${ARGUMENTS[$1]}" != "" ];then
			if man "$SCRIPT_NAME-$1" > /dev/null 2>&1; then
				man "$SCRIPT_NAME-$1"
			else
				echo "missing man page for $SCRIPT_NAME-$1"
			fi
		else
			echo "$1 is not a valid $SCRIPT_NAME argument"
		fi
	else
		cat << EOF
usage: $SCRIPT_NAME <command>

These are the current available commands:
pending
subadd [<URL>]
subcheckout [-b] [<BRANCH>]
subcommit [*]
subrm [<PATH>]
substatus [<options>...] [--] [<pathspec>...]
subtag [<options>] [<TAGNAME>]
mangen
EOF
	fi
}

mangen() {
	sudo mkdir -p /usr/local/man/man1
	for f in manpages/man1/*.md; do
		local base
		base=${f%.*}
		echo "generating $base.1 from $f"
		pandoc "$f" -s -t man -o "$base.1"
		echo "zipping $base.1"
		gzip "$base.1"
		echo "moving $base.1.gz"
		#sudo mv "$base.1.gz" /usr/local/man/man1
	done
	sudo mandb
}

menu() {
	if [ "$1" = "" ]; then
		help
	elif [ "${ARGUMENTS[$1]}" != "" ]; then
		if [ "${ARGUMENTS[$1]}" = "-1" ]; then
			"$@"
		elif [ $(($# - 1)) -gt $((${ARGUMENTS[$1]})) ]; then
			if [ "$2" = "--help" ] || [ "$2" = "-h" ]; then
				echo "$@"
				man "$SCRIPT_NAME-$1"
			else
				echo "$SCRIPT_NAME $1 only accepts up to ${ARGUMENTS[$1]} arguments"
				echo "see $SCRIPT_NAME $1 --help for more information"
			fi
		else
			"$@"
		fi
	elif [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		if [ $(($# - 2)) -gt $((${ARGUMENTS[$1]})) ]; then
			echo "$SCRIPT_NAME $1 only accepts up to ${ARGUMENTS[help]} arguments"
			echo "see $SCRIPT_NAME $1 --help for more information"
		else
			if [ "$2" = "" ]; then
				help
			elif [ "${ARGUMENTS[$2]}" != "" ]; then
				help "${@:2}"
			else
				echo "$* is not a valid $SCRIPT_NAME command. see $SCRIPT_NAME --help for more information"
			fi
		fi
	elif [ "$1" = "version" ] || [ "$1" = "--version" ] || [ "$1" = "-v" ]; then
		echo "$VERSION"
	else
		echo "$* is not a valid $SCRIPT_NAME command. see $SCRIPT_NAME --help for more information"
	fi
}

menu "$@"
